{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description"   : "Generate aws lambda to check RSS feeds for new content. S3 stores cache.",
  "Parameters"               : {
        "ParamURLs" : {
            "Description" : "comma separated list of urls to check for RSS updates",
            "Type"        : "CommaDelimitedList",
            "Default"     : "https://aws.amazon.com/blogs/aws/feed/,https://larnerholt.com/feed/,https://blog.mprelu.de/feed"
        },
        "ParamS3Bucket" : {
            "Description" : "S3 Bucket to store alerted blog posts",
            "Type"        : "String",
            "MinLength"   : 1
        },
        "ParamS3Path" : {
            "Description" : "Path within that S3 bucket",
            "Type"        : "String",
            "Default"     : "blogalerts/"
        },
        "ParamEmail" : {
            "Description" : "Email to send alerts to",
            "Type"        : "String",
            "Default"     : "test@test.com"
        }
  },
  "Resources"     : {
    "LambdaFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
            "ZipFile": { "Fn::Join": ["\n", [
                "var http = require('http');",
                "var https = require('https');",
                "var AWS = require('aws-sdk');",
                "var s3 = new AWS.S3();",
                {"Fn::Join": ["", ["var bucket = '", {"Ref":"ParamS3Bucket"} ,"';"]]},
                {"Fn::Join": ["", ["var bucketPath = '", {"Ref":"ParamS3Path"} ,"';"]]},

                "exports.handler = function(event, context) {",

                  "var splitUrl, httpFeedUrls = [], httpsFeedUrls = [];",
                  
                  {"Fn::Join": ["", ["var urls = ['", {"Fn::Join": ["','", {"Ref":"ParamURLs"}]} ,"'];"]]},

                  "for(i in urls){",
                      "splitUrl = urls[i].split('/');",
                      "if ('https:'===splitUrl[0]){",
                          "httpsFeedUrls.push(",
                              "{",
                                  "method: 'GET',",
                                  "protocol: splitUrl[0],",
                                  "hostname: splitUrl[2],",
                                  "path: '/' + splitUrl[3]",
                              "}",
                          ");",
                      "} else {",
                          "httpFeedUrls.push(",
                              "{",
                                  "method: 'GET',",
                                  "protocol: splitUrl[0],",
                                  "hostname: splitUrl[2],",
                                  "path: '/' + splitUrl[3]",
                              "}",
                          ");",
                      "}",
                  "}",

                  "//number of requests that have returned",
                  "var returnedCount = 0;",

                  "var output = [];",

                  "function sendEmail(subject, msg){",
                    "var ses = new AWS.SES({apiVersion: '2010-12-01'});",
                    {"Fn::Join": ["", ["var emailRecipient = ['", {"Ref":"ParamEmail"} ,"'];"]]},
                    "var details = [];",
                
                    "var body = msg;",

                    "var joy = ses.sendEmail({",
                      {"Fn::Join": ["", ["Source: '", {"Ref":"ParamEmail"} ,"',"]]},
                      "Destination: { ToAddresses: emailRecipient },",
                      "Message: {",
                      "  Subject: {",
                          "Data: subject",
                      "  },",
                      "  Body: {",
                          "Text: {",
                          "  Data: body",
                          "}",
                      "  }",
                      "}",
                    "}, function(err, data) {",
                      "if(err) {",
                      "  //console.log(err);",
                      "} else {",
                      "  //console.log(null);",
                      "}",
                    "});",
                    "//console.log(joy.response);",
                  "}",

                  "function parseResponse(res) {",
                      "if(res.statusCode == 200){",
                          "// Continuously update stream with data",
                          "var body = '';",
                          "res.on('data', function(d) {",
                              "body += d;",
                          "});",
                          "res.on('end', function() {",
                          "  // Data reception is done, do whatever with it!",

                          "  var a, str, title, items, link, feedType;",
                          "  if(body.indexOf('application/rss+xml') > 0){",
                              "  feedType = 'rss';",
                              "  items = body.split(/<item>/);",
                          "  } else if(body.indexOf('application/atom+xml') > 0){",
                              "  feedType = 'atom';",
                              "  items = body.split(/<entry>/);",
                          "  } else {",
                              "  //not rss or atom so don't know how to parse!",
                              "  items = false;",
                          "  }",
                
                          "  if(items !== false){",
                              "  //for each blog post",
                              "  for (a in items){",
                                  "//skip the first entry because it will be the entire xml response",
                                  "if(a==0){",
                                      "continue;",
                                  "}",
                
                                  "str = items[a];",
                
                                  "title = str.match(/<title>(.+?)<\\/title>/);",
                                  "link = str.match(/<link (.*?)\\/>/);",
                                  "if(link === null){",
                                      "link = str.match(/<link>(.*?)<\\/link>/);",
                                  "}else{",
                                      "link = link[0].match(/href=\"(.+?)\"/);",
                                  "}",
                
                                  "s3.getObject({",
                                      "Bucket: bucket,",
                                      "Key:  bucketPath + title[1]",
                                  "}).on('success', function(response) {",
                                      "//console.log('success Key was', response.request.params.Key);",
                                  "}).on('error', function(error, response) {",
                                      "//console.log('s3 get error ', error.message);",
                                      "if(error.message === 'The specified key does not exist.') {",
                                          "//check it twice as sometimes, very rarely, we get a 404 from S3 due to an issue with that node.",
                                          "s3.getObject({",
                                              "Bucket: bucket,",
                                              "Key:  bucketPath + title[1]",
                                          "}).on('success', function(response) {",
                                              "//console.log('success Key was', response.request.params.Key);",
                                          "}).on('error', function(error, response) {",
                                              "//console.log('s3 get error ', error.message);",
                                              "if(error.message === 'The specified key does not exist.') {",
                                                  "//console.log('error Key was', response.request.params.Key);",
                                                  "//save entry to s3",
                                                  "s3.putObject({",
                                                      "Bucket: bucket,",
                                                      "Key: response.request.params.Key,",
                                                      "Body: ' '",
                                                  "}).on('success', function(response) {",
                                                      "//console.log('success put ', response.request.params.Key);",
                                                  "}).on('error', function(error, response) {",
                                                      "//console.log('error put ', response.request.params.Key);",
                                                  "}).send();",
                                                  "",
                                                  "//send alert email",
                                                  "sendEmail('New Blog:' + title[1], link[1]);",
                                                  "//console.log('s3 get error ', error);",
                                              "}",
                                          "}).send();",
                                      "}",
                                  "}).send();",
                              "  }",
                          "  }",
                          "});",
                      "}",
                  "}",

                  "var feed, i, req;",
                  "//http feeds",
                  "for (i in httpFeedUrls){",
                      "feed = httpFeedUrls[i];",
                      "req = http.request(",
                          "feed,",
                          "parseResponse",
                      ");",
                      "req.end();",
                  "}",

                  "//https feeds",
                  "for (i in httpsFeedUrls){",
                      "feed = httpsFeedUrls[i];",
                      "req = https.request(",
                          "feed,",
                          "parseResponse",
                      ");",
                      "req.end();",
                  "}",
                "}"
            ]]}
        },
        "Description" : "Check RSS feeds for new blog posts",
        "FunctionName" : "cloudformation-rss-checker",
        "Handler" : "index.handler",
        "MemorySize" : 1536,
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Runtime" : "nodejs4.3",
        "Timeout" : 10
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }]
          }
        }]
      }
    },
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(30 minutes)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["LambdaFunction", "Arn"] },
          "Id": "TargetFunctionV1"
        }]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["ScheduledRule", "Arn"] }
      }
    }
  }
}
